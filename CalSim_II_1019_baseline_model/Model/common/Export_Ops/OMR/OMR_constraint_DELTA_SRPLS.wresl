! OMR_constraint.wresl
!
! **********************************************************************************************
define OMR_RPA {value max(OMR_RPA_FWS,OMR_RPA_LF)}
!
! Special calcs for VAMP Action
define Qexp_pulseperiod  {
       case VAMP {
!                condition month>=APR .and. month<=MAY .and. OMR_RPA >= -12000.
                condition month>=APR .and. month<=MAY .and. int(B2Action3On)==1 .and. OMR_RPA >= -12000.
                value PulseExpRes}
       case None {
                condition always
                value BanksCapPermit + maxTracycalc}
}

! Special calcs for NMFS Action
define Qexp_Max {value min(MAXEXP_RPA,Qexp_pulseperiod) }

! How much of CCWD estimated demand will impact OMR flows?
define CCWDFraction {value (D408_OR_max + D408_VC_max)/(D408_RS_max + D408_OR_max + D408_VC_max)}
define Qsod_noExp { value 0. + D408D416_est*CCWDFraction + netDICU_SOD}
!
define Qsod_VAMPperiod { value Qexp_Max + D408D416_est*CCWDFraction + netDICU_SOD}
define Qomr_VAMPperiod { value coefA*C639[VAMP_AND_DO]+coefb*Qsod_VAMPperiod+coefc}
define Qomr_VAMPperiodv {alias Qomr_VAMPperiod kind 'FLOW-CHANNEL' units 'CFS'}
!
! Action triggers
define C408_limit_init {
     case DEC_MAR{
          condition month>=DEC .and. month<=MAR .and. OMR_RPA >= -12000.
          value OMR_RPA}
     case Apr{
          condition month==APR .and. OMR_RPA >= -12000.
!  doing full 60 day NMFS Action at the pumps so this calc does not matter
!          value OMR_RPA*14./daysin + max(Qomr_VAMPperiod,OMR_RPA)*(daysin-14.)/daysin}
          value OMR_RPA}
     case May{
          condition month==MAY .and. OMR_RPA >= -12000.
!  doing full 60 day NMFS Action at the pumps so this calc does not matter
!          value max(Qomr_VAMPperiod,OMR_RPA)*15./daysin + OMR_RPA*(daysin-15.)/daysin}
          value OMR_RPA}
     case Jun{
          condition month==JUN .and. OMR_RPA >= -12000.
          value OMR_RPA}
     case otherwise{
          condition always
          value -99999.}
}
!
! **********************************************************************************************
!
define Qsod_HandS { value max(tracyminpump + banksminpump,HandS_minpump) + D408D416_est*CCWDFraction + netDICU_SOD}
define Qomr_HandS { value coefA*C639[VAMP_AND_DO]+coefb*Qsod_HandS+coefc}
define Qomr_HandSdv {alias Qomr_HandS kind 'FLOW-CHANNEL' units 'CFS'}
define Qomr_noExp { value coefA*C639[VAMP_AND_DO]+coefb*Qsod_noExp+coefc}
define Qomr_noExpdv {alias Qomr_noExp kind 'FLOW-CHANNEL' units 'CFS'}
define C408_limit {value min(C408_limit_init,Qomr_HandS)}          !AK as per Nancy 09/03/2019
!define C408_limit {value min(C408_limit_init,Qomr_noExp)}
define C408_LBound  {alias C408_limit kind 'FLOW-LBOUND' units 'CFS'}
!
goal bound_Qomr { C408 > C408_limit }
!
! Split arcs and Goals to force impacts of actions at pumps
!*********************************************************************************************
! C408_Base represents the OMR flow not including COA related pumping at Banks or Tracy
define C408_NoEXP1  {lower -99999*taf_cfs upper 99999*taf_cfs kind 'FLOW-CHANNEL' units 'CFS'}
goal set_C408NoEXP1 {C408_NoEXP1 - C408 = D419_EXP1_TD + D418_EXP1_TD + D419_CVPDEDEX1TD + D408_P_WHL_SB_E1 + D408_P_WHL_SF_E1}

! 1. Calculate how much OMR flow needs to be increased from
!		the previous cycle in order to meet the OMR flow criteria.
! 2. Calculate the amount exports must be decreased from 
!		the previous cycle in order to achieve the OMR flow increase calculated above.
! 3. If SWP exports in the previous cycle were greater than CVP exports, 
!		the first decrease will be applied to SWP exports until OMR is met
!		or SWP exports equal CVP exports.
! 4. If CVP exports in the previous cycle were greater than SWP exports, 
!		the first decrease will be applied to CVP exports until OMR is met
!		or CVP exports equal SWP exports.
! 5. Once exports are equal and if further cuts to exports must be made, 
!		cuts will be made equally by this combined amount.

!-KS, 8/24/18. Revised code to assign available export capacity, instead of assigning portion of export reduction met by each project.
!-KS, 8/24/18. This formulation allows for experimenting with other than 50/50 sharing of available export capacity.

define OMR_increase {value max(0., C408_limit - C408[UPSTREAM])}
define Export_dec {value max(0.,-OMR_increase/coefB)}

define MAXEXP_OMR {value max(D409[UPSTREAM] - Export_dec, (1-max(JonesIFSwitch,BanksIFSwitch)) * Qomr_HandS)} !-KS, 8/13/18.

define MAXEXP_OMR_CVP_Init {value CVPExpCapShare_Srpls*MAXEXP_OMR}
define MAXEXP_OMR_SWP_Init {value SWPExpCapShare_Srpls*MAXEXP_OMR}

define Unused_MAXEXP_OMR_CVP {value max(0., MAXEXP_OMR_CVP_Init - D418_TD[UPSTREAM])}
define Unused_MAXEXP_OMR_SWP {value max(0., MAXEXP_OMR_SWP_Init - D419_swp_TD[UPSTREAM])}

define MAXEXP_OMR_CVP {value max(tracyminpump,min(D418_TD[UPSTREAM], MAXEXP_OMR_CVP_Init) + Unused_MAXEXP_OMR_SWP)}
define MAXEXP_OMR_SWP {value max(banksminpump,min(D419_swp_TD[UPSTREAM], MAXEXP_OMR_SWP_Init) + Unused_MAXEXP_OMR_CVP)}

!define SWP_exp_dec {value max(0.,min(Export_dec, D419_swp_TD[UPSTREAM] - D418_TD[UPSTREAM]
!                          - D419_CVPDEDEX1TD[UPSTREAM] - D408_P_WHL_SB_E1[UPSTREAM] - D408_P_WHL_SF_E1[UPSTREAM]))}
!define CVP_exp_dec {value max(0.,min(Export_dec, D418_TD[UPSTREAM] + D419_CVPDEDEX1TD[UPSTREAM] 
!                              + D408_P_WHL_SB_E1[UPSTREAM] + D408_P_WHL_SF_E1[UPSTREAM] - D419_swp_TD[UPSTREAM]))}
!define Comb_exp_dec {value max(0., Export_dec - SWP_exp_dec - CVP_exp_dec)}

define OMR_increase_ {alias OMR_increase kind 'temp' units 'cfs'}
define Export_dec_   {alias Export_dec kind 'temp' units 'cfs'}
define MAXEXP_OMR_   {alias MAXEXP_OMR kind 'temp' units 'cfs'}

define MAXEXP_OMR_SWP_Initdv {alias MAXEXP_OMR_SWP_Init kind 'TEMP' units 'CFS'}
define Unused_MAXEXP_OMR_SWPdv {alias Unused_MAXEXP_OMR_SWP kind 'TEMP' units 'CFS'}
define MAXEXP_OMR_SWPdv {alias MAXEXP_OMR_SWP kind 'EXPORT-LIMIT' units 'CFS'}

define MAXEXP_OMR_CVP_Initdv {alias MAXEXP_OMR_CVP_Init kind 'TEMP' units 'CFS'}
define Unused_MAXEXP_OMR_CVPdv {alias Unused_MAXEXP_OMR_CVP kind 'TEMP' units 'CFS'}
define MAXEXP_OMR_CVPdv {alias MAXEXP_OMR_CVP kind 'EXPORT-LIMIT' units 'CFS'}

!define SWP_exp_dec_  {alias SWP_exp_dec kind 'temp' units 'cfs'}
!define CVP_exp_dec_  {alias CVP_exp_dec kind 'temp' units 'cfs'}
!define Comb_exp_dec_ {alias Comb_exp_dec kind 'temp' units 'cfs'}


/*goal bound_D419 {
  lhs     D419_EXP1_TD + D408_P_WHL_SB_E1
  case FWSBOActions{
  condition month>=dec .and. month<=jun
    rhs     0.5*C408_NoEXP1 - 0.5*C408_limit
    lhs>rhs    penalty 1285
    lhs<rhs penalty    0}
}
!
goal bound_D418 {
  lhs     D418_EXP1_TD + D419_CVPDEDEX1TD + D408_P_WHL_SF_E1
  case FWSBOActions{
    condition month>=dec .and. month<=jun
    rhs     0.5*C408_NoEXP1 - 0.5*C408_limit
    lhs>rhs    penalty 1285
    lhs<rhs penalty    0}
}*/

goal bound_D419 {
  lhs     D419_swp_TD
  case FWSBOActions {
  condition   month>=dec .and.  month<=jun 
    rhs     MAXEXP_OMR_SWP
    lhs>rhs    penalty 1285
    lhs<rhs penalty    0}
}

goal bound_D418 {
  lhs     D418_TD + D419_CVPDEDEX1TD + D408_P_WHL_SF_E1
  case FWSBOActions {
    condition   month>=dec .and.  month<=jun    
    rhs     MAXEXP_OMR_CVP
    lhs>rhs    penalty 1285
    lhs<rhs penalty    0}
}

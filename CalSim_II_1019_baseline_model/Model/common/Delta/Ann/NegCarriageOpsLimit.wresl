! NegCarriageOpsLimit.wresl

define est_exp_2 {value max(ExportCap,EstTotExpTD)}
define exp_est_total_2 {alias est_exp_2 kind 'ESTIMATE' units 'CFS'}

!Emmaton
define est_req_sac_em {
  case NegCarriage{
    condition EM_m_sv >= 1.0
    value (est_exp_2-EM_b_sv)/EM_m_sv}
  case Normal {
    condition always
    value 0.}
}
define req_sac_est_em {alias est_req_sac_em kind 'ESTIMATE' units 'CFS'}

!Rock Slough
define est_req_sac_rs {
  case NegCarriage{
    condition RS_m_1_sv >= 1.0
    value (est_exp_2-RS_b_1_sv)/RS_m_1_sv}
  case Normal {
    condition always
    value 0.}
}
define req_sac_est_rs {alias est_req_sac_RS kind 'ESTIMATE' units 'CFS'}

define NegCWcondition {
    case NegCW {
        condition EM_m_sv >= 1.0 .or. RS_m_1_sv >= 1.0
        value 1.0 }
    case otherwise {
        condition always
        value 0. }
}

goal target_sac{
  lhs C400_ANN - C400_reop
!/* Don't use this goal if IF is available as alternate export pathway
 /* case NegCarriageLowStorage {
    condition NegCWcondition>0.5 .and. S4(-1)<ShastaNCPLow-500.
    rhs max(est_req_sac_em,est_req_sac_rs)
    lhs>rhs penalty 1284
    lhs<rhs penalty 0}
 */ case NegCarriage{
    condition NegCWcondition > 0.5
    rhs max(est_req_sac_em,est_req_sac_rs)
    lhs>rhs penalty 1000
    lhs<rhs penalty 0}
!*/
  case Normal {
    condition always
    rhs 0.
    lhs>rhs penalty 0
    lhs<rhs penalty 0}
}

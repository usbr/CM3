! R.Wilbur 3/24/04 and Shengjun 4/27/2005
/*

ARTIFICIAL NEURAL NETWORK IMPLEMENTATION - CHIPPS ISLAND

Chipps Island salinity standard:
28-day running average of mean daily EC may not exceed standard for the periods listed below (mmhos):
water-year-type    Jan-May    Oct-Dec
Wet                12.5       12.5
Above Normal       12.5       12.5
Below Normal       12.5       12.5
Dry                12.5       15.6*
Critical           12.5       15.6*

*applies only when project users are taking deficiencies in scheduled water supplies, otherwise 12.5 applies.

The 28-day running average is assumed to be identical to the monthly average for the monthly time-step model.

*/

!****************************************************************************************

! calculate previous month's value of salinity
define CH_EC_Month_sv {
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-5),D409(-4),D409(-3),D409(-2),D409(-1),
               C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(monthly_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC(C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-5),D409(-4),D409(-3),D409(-2),D409(-1),
               C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(monthly_ave),(month-1),wateryear)}
}

define CH_EC_Month {std kind 'SALINITY' units 'UMHOS/CM'}
goal setCH_EC_MON {CH_EC_Month = CH_EC_Month_sv}

!get ANN_EC for 2 month earlier 4/14/2005
define CH_EC_Month_smooth_sv {
  case October {
    condition  month == Oct
      value  AnnEC_matchDSM2(
             C400(-7),C400(-6), C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-6),D409(-5),D409(-4),D409(-3),D409(-2),
               C639(-7),C639(-6),C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               VERNWQFINAL(-6),VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(monthly_ave),11,(wateryear-1))}

  case November {
    condition  month == Nov
      value  AnnEC_matchDSM2(
             C400(-7),C400(-6), C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-6),D409(-5),D409(-4),D409(-3),D409(-2),
               C639(-7),C639(-6),C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               VERNWQFINAL(-6),VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(monthly_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC_matchDSM2(
             C400(-7),C400(-6), C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-6),D409(-5),D409(-4),D409(-3),D409(-2),
               C639(-7),C639(-6),C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               VERNWQFINAL(-6),VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(monthly_ave),(month-2),wateryear)}
}

define CH_EC_MonthDSM2 {std kind 'SALINITY' units 'UMHOS/CM'}
goal setCH_EC_DSM2 {CH_EC_MonthDSM2 = CH_EC_Month_smooth_sv}

! calculate the maximum 14 day running average
define CH_EC_Max14Day_sv {
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-5),D409(-4),D409(-3),D409(-2),D409(-1),
               C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(max_14day_running_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC(C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-5),D409(-4),D409(-3),D409(-2),D409(-1),
               C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(max_14day_running_ave),(month-1),wateryear)}
}
define CH_EC_Max14Day {std kind 'SALINITY' units 'UMHOS/CM'}
goal setCH_EC_14Ave {CH_EC_Max14Day = CH_EC_Max14Day_sv}

!get ANN_EC for 2 month earlier
define CH_EC_Max14day_smooth_sv {
  case October {
    condition  month == Oct
      value  AnnEC_matchDSM2(
             C400(-7),C400(-6), C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-6),D409(-5),D409(-4),D409(-3),D409(-2),
               C639(-7),C639(-6),C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               VERNWQFINAL(-6),VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(max_14day_running_ave),11,(wateryear-1))}

  case November {
    condition  month == Nov
      value  AnnEC_matchDSM2(
             C400(-7),C400(-6), C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-6),D409(-5),D409(-4),D409(-3),D409(-2),
               C639(-7),C639(-6),C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               VERNWQFINAL(-6),VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(max_14day_running_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC_matchDSM2(
             C400(-7),C400(-6), C400(-5),C400(-4),C400(-3),C400(-2),C400(-1),
               D409(-6),D409(-5),D409(-4),D409(-3),D409(-2),
               C639(-7),C639(-6),C639(-5),C639(-4),C639(-3),C639(-2),C639(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               VERNWQFINAL(-6),VERNWQFINAL(-5),VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(CH),int(max_14day_running_ave),(month-2),wateryear)}
}

define CH_EC_Max14_DSM2 {std kind 'SALINITY' units 'UMHOS/CM'}
goal setCH_EC_DSM2_2 {CH_EC_Max14_DSM2 = CH_EC_Max14day_smooth_sv}

!****************************************************************************************
! define the EC standard for Jersey Point (millimhos/cm)
define act_CH_ECstd {
  case JanToMay {
    condition  month >=Jan .and. month <=May
    value      12.5}
  case AprToAugDry {
    condition  month >=Oct .and. month <=Dec .and. wyt_ann == 4
    value      15.6}
  case AprToAugCritical {
    condition  month >=Oct .and. month <=Dec .and. wyt_ann == 5
    value      15.6}
  case NoStandard {
    condition  always
    value      99.0}
}
define CH_EC_STD_sv {value act_CH_ECstd * 1000.0}
define CH_EC_STD {std kind 'SALINITY' units 'UMHOS/CM'}
goal CHECstandout {CH_EC_STD = CH_EC_STD_sv}

!****************************************************************************************

define CH_b_sv {
  case control{
    condition month >= Oct .and. month <= May
    value  AnnLineGen(c400_ANN(-4),c400_ANN(-3),c400_ANN(-2),c400_ANN(-1),
                    D409(-4),D409(-3),D409(-2),D409(-1),
                    C639(-4),C639(-3),C639(-2),C639(-1),SJR_ann_est,
                    DXC(-4),DXC(-3),DXC(-2),DXC(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VernWQfinalSV,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    CH_EC_STD_sv,line_EM_lo,line_EM_hi,
                    int(CH),int(intercept),int(ann_type),month,wateryear,4)}
  case other {
    condition  always
    value 999999.}
}
define CH_m_sv {
  case reducecalls {
    condition  CH_b_sv >= 999990.
    value 0.}
  case control{
    condition month >= Oct .and. month <= May
    value  AnnLineGen(c400_ANN(-4),c400_ANN(-3),c400_ANN(-2),c400_ANN(-1),
                    D409(-4),D409(-3),D409(-2),D409(-1),
                    C639(-4),C639(-3),C639(-2),C639(-1),SJR_ann_est,
                    DXC(-4),DXC(-3),DXC(-2),DXC(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    VERNWQFINAL(-4),VERNWQFINAL(-3),VERNWQFINAL(-2),VERNWQFINAL(-1),VernWQfinalSV,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    CH_EC_STD_sv,line_EM_lo,line_EM_hi,
                    int(CH),int(slope),int(ann_type),month,wateryear,4)}
  case other {
    condition  always
    value 0.}
}
define CH_m {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define CH_b {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setCH_m {CH_m = CH_m_sv}
goal setCH_b {CH_b = CH_b_sv}

!****************************************************************************************

!Get the required Sac flow for ZERO exports
define CH_Sac_ZeroExp_sv1 {
  case NoSalinityControlPossible{
    condition abs(CH_m_sv) <= 0.001 .and. int(CH_b_sv) == 0
    value 0.}
    case NegSlope {
      condition CH_m_sv <= 0.0
      value	0.}
  case NegCarriage{
    condition CH_m_sv >= 1.0
    value 0.}
  case control{
    condition month >= Oct .and. month <= May
    value -CH_b_sv/CH_m_sv}
  case other {
    condition  always
    value 0.}
}
define CH_Sac_ZeroExp_sv2 {value max(0.0,CH_Sac_ZeroExp_sv1)}
define CH_Sac_ZeroExp {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setCH_Sac_ZeroExp {CH_Sac_ZeroExp = CH_Sac_ZeroExp_sv2}

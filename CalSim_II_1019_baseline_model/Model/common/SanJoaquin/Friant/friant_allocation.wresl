! Friant_allocation.wresl
! Created for the Upper San Joaquin River Basin Storage Investigation Project
! Implements Friant water allocation scheme
! Revised by C. Hsu, USBR, 02/25/03 for review and documentation project
!##############################################################################
/*
Define total delivery variables for Friant Class I & II water also the water releases due to rainfall or snowmelt runoff
*/
! Total Delivery (Friant-Kern Canal + Madera Canal) of Class 1 Water from Friant
define tot_C1_del {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF' }
! Total Delivery (Friant-Kern Canal + Madera Canal) of Class 2 Water from Friant
define tot_C2_del {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF' }
! Estimated Friant release due to rainfall runoff into Friant
define Fr_rain_rel {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }
! Estimated volume of water to be released due to snowmelt runoff into Friant
define Fr_snow_rel_vol {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }
! Define snowmelt release forecast
define snow_rel_for {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }
define snow_rel_for_cor {upper unbounded lower unbounded kind 'FRIANT-FC' units 'TAF' }

/*
 * Define delivery variables for making up Exchange shortages;
 * Water supply is already reduced in friant_wsf.wresl by EXC annual shortage
 * Now need to allocate that annual shortage across the delivery season mar-october
 * @jmg 2016.11.10
 */
 ! monthly delivery to Exchange contractors from Friant - use this for keeping track of
 ! how much of allocation has been delivered so far in delivery year
!define FEX_del_mon {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF'}
!define fex_alloc {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF'}

! 
define und_D18B_C1 {std kind 'under-delivery' units 'taf'}
define und_D18B_C2 {std kind 'under-delivery' units 'taf'}
define tot_und_D18B_C1 {std kind 'under-delivery' units 'taf'}
define tot_und_D18B_C2 {std kind 'under-delivery' units 'taf'}
define re_und_D18B_C1 {std kind 'reallocated' units 'taf'}
define re_und_D18B_C2 {std kind 'reallocated' units 'taf'}

define tot_und_D18B_C1_ {
        case March {
                condition       month == mar
                value           0.
        }
        case otherwise {
                condition       always
                value           max(0.,tot_und_D18B_C1(-1) + und_D18B_C1(-1) - re_und_D18B_C1(-1))
        }
}
goal set_tot_und_D18B_C1 {tot_und_D18B_C1 = tot_und_D18B_C1_}

define unf_spill {value (C18F(-1) + D18F(-1))*cfs_taf(-1)
        + max(0.,((D18A_16B(-1) + D18B_16B(-1) + D18A_215(-1) + D18B_215(-1))*cfs_taf(-1) - Fr_snow_rel_vol(-1)))} ! Spill above snowmelt forecast release.

define tot_und_D18B_C2_ {
        case March {
                condition       month == mar
                value           0.
        }
        case otherwise {
                condition       always
                value           max(0.,tot_und_D18B_C2(-1) + und_D18B_C2(-1) - re_und_D18B_C2(-1) - unf_spill)
        }
}
goal set_tot_und_D18B_C2 {tot_und_D18B_C2 = tot_und_D18B_C2_}

!Correct water supply forecast.
define FR_WS_for_cor {
        case March {
                condition       month == mar
                value           FR_WS_for
        }
        case otherwise {
                condition       always
                value           Fr_WS_for - max(0.,tot_und_D18B_C1_ - max(0.,unf_spill -(tot_und_D18B_C2(-1) + und_D18B_C2(-1) - re_und_D18B_C2(-1))) + tot_und_D18B_C2_)
        }
}


/*
Class 1 allocation - March through June
*/
! Sum of the Class 1 water delivered prior to current month
define Class1_delivered {
        case march {
            condition month == mar
            value 0.0 }
        case initialyear {
            condition month < mar .and. wateryear == 1922
            value 0.0 }
        case otherwise {
            condition always
            sum(i=prevmar,-1,1) tot_C1_del(i) } }

/*
Maximum amount of Class 1 and Class 2 Friant allocations
*/
! Maximum Class 1 allocation is 800 TAF
define Class1_max { value 800. }
! Maximum Class 2 allocation is 1400 TAF
define Class2_max { value 1400. }
! Define temporary variable for class1_alloc
define C1_alloc_tmp {upper unbounded lower unbounded kind 'TEMPORARY' units 'TAF' }

/*
Determination of Friant Class 1 allocation.  Allocation made March through June is determined
by Friant water supply forecast and the difference between Class 1 allocation and delivery.
*/
define class1_alloc {
        case MarthruJun {
           condition   month >= mar .and. month <= jun
            value max(0.0, min(Fr_WS_for_cor, Class1_max - Class1_delivered)) }
        case firstmonth {
            condition wateryear == 1922 .and. month == oct
            value 0.0 }
        case otherwise {
            condition   always
            value C1_alloc_tmp(-1) - tot_C1_del(-1) } }
! Allows past values of Class 1 allocation can be accessed via C1_alloc_tmp
goal set_C1_alloc_tmp {C1_alloc_tmp = class1_alloc }


/*
Class 2 plus surplus allocation - March through June
NOTE: must first calculate spills, then subtract spills from water supply available to
get Class 2 allocation
*/
! Sum of Friant inflow from current month through June
define I18_mon_thru_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        sum(i=0,9-month,1) I18(i) * cfs_taf(i) }
    case otherwise {
        condition   always
        value 0.0 } }

! Sum of the average evaporation losses from current month through June
define Fr_Evap_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        select thru_jun
        from Friant_Evap
        where contract_month = contract_month }
    case otherwise {
        condition   always
        value 0.0  } }

! Sum of the minimum required San Joaquin River below Friant flows from current month through June
define C18_min_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        select thru_jun
        from Upper_sjr_losses
        where contract_month = contract_month }
    case otherwise {
        condition   always
        value 0.0  } }


! Sum of the combined Madera and Friant-Kern canal losses from current month through June
define FR_losses_jun {
    case FebthruJun {
        condition   month >= feb .and. month <= jun
        select thru_jun
        from Friant_canal_Losses
        where contract_month = contract_month }
    case otherwise {
        condition   always
        value 0.0  } }

/*
Sum of the estimated deliveries from Friant from current month through June
Assume maximum delivery for spill calculation. Max delivery assumed to avoid unnecessary spills
*/
define Fr_del_est_prct {
        select thru_jun
        from Friant_max_del
        where contract_month = contract_month }
! Define the amount of the estimated deliveries from Friant
define Fr_del_est_jun { value Fr_del_est_prct / 100. * 2200.}

/*
Snowmelt release logic - release due to snowmelt runoff
Forecast of the amount of water that will be spilled from Friant between current month and June
*/
define Fr_for_spill {
    case Febthrujun {
         condition   month >= Feb .and. month <= jun
         value max(0.0, I18_mon_thru_jun - Fr_del_est_jun - SJRR_mon_jun - FR_losses_jun
                        - Fr_Evap_jun + SIO_FWUA(-1) - S18level5 - S17level3) }
    case otherwise {
        condition always
        value 0.0 } }
! Set snowmelt release forecast equals to Friant spill forecast
goal set_snow_rel_for {snow_rel_for = fr_for_spill}

define Fr_for_spill_cor {
    case March {
         condition month == Mar
         value Fr_for_spill}
    case Febthrujun {
         condition   month >= Feb .and. month <= jun
         value max(0.0, Fr_for_spill - max(0.,tot_und_D18B_C1_ - max(0.,unf_spill -(tot_und_D18B_C2(-1) + und_D18B_C2(-1) - re_und_D18B_C2(-1))) + tot_und_D18B_C2_)) }
    case otherwise {
        condition always
        value 0.0 } }
! Set snowmelt release forecast equals to Friant spill forecast
goal set_snow_rel_for_cor {snow_rel_for_cor = fr_for_spill_cor}

! used for debugging
!define I18_jun_ck {alias I18_mon_thru_jun kind 'temp' units 'none'}
!define Fr_Evap_jun_ck {alias Fr_Evap_jun kind 'temp' units 'none'}
!define FR_loss_ck {alias FR_losses_jun kind 'temp' units 'none'}
!define Fr_del_p_ck {alias Fr_del_est_prct kind 'temp' units 'none'}
!define Fr_del_jun_ck {alias Fr_del_est_jun kind 'temp' units 'none'}
!define C18_min_jun_ck {alias C18_min_jun kind 'temp' units 'none'}

! Friant flood control release pattern required to release forecast seasonal snowmelt
define Fr_srp {
    case feb {
        condition month == feb
        select percent
        from Feb_snowmelt_release_pattern
        given forecast_spill = fr_for_spill_cor
        use minimum
        where contract_month = contract_month }
    case mar {
        condition month == mar
        select percent
        from Mar_snowmelt_release_pattern
        given forecast_spill = fr_for_spill_cor
        use minimum
        where contract_month = contract_month }
    case apr {
        condition month == apr
        select percent
        from Apr_snowmelt_release_pattern
        given forecast_spill = fr_for_spill_cor
        use minimum
        where contract_month = contract_month }
    case may {
        condition month == may
        select percent
        from May_snowmelt_release_pattern
        given forecast_spill = fr_for_spill_cor
        use minimum
        where contract_month = contract_month }
    case jun {
        condition month == jun
        select percent
        from May_snowmelt_release_pattern
        given forecast_spill = fr_for_spill_cor
        use minimum
        where contract_month = contract_month }
    case otherwise {
        condition always
        value 0.0 } }

/*
Snowmelt release is the forecasted amount of water that will be spilled from Friant
times the Friant flood control release pattern
*/
goal set_snow_rel_volume { Fr_snow_rel_vol = fr_for_spill_cor * Fr_srp / 100. }

! Define temporary variable for class2_alloc
define C2_alloc_tmp {upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}

! Class 2 Allocation for March, April-May and Jun-Aug
! Sum of the Class 2 water delivered prior to current month
define Class2_delivered {
        case march {
            condition month == mar
            value 0.0 }
        case initialyear {
            condition month < mar .and. wateryear == 1922
            value 0.0 }
        case otherwise {
            condition always
            sum(i=prevmar,-1,1) tot_C2_del(i) } }
/*
define Class2_alloc {
        case Mar {
            condition month == mar
            value min(Class2_max, Fr_WS_for - Class1_alloc - Fr_for_spill) }
        case initial {
            condition month <= feb .and. wateryear == 1922
            value 0.0 }
        case aprthrumay {
            condition month >= apr .and. month <= may
            value max(0.0, C2_alloc_tmp(-1) - max(0.0, Fr_rain_rel(-1) - Fr_snow_rel_vol(-1)) - (fr_for_spill - snow_rel_for(-1))) }
        case junthruaug {
            condition month >= jun .and. month <= aug
            value max(0.0, C2_alloc_tmp(-1) - max(0.0, Fr_rain_rel(-1) - Fr_snow_rel_vol(-1))) }
        case otherwise {
            condition  always
            value C2_alloc_tmp(-1)}
}

! Allows past values of Class 2 Allocation can be accessed
goal set_C2_alloc_tmp {C2_alloc_tmp = class2_alloc }
*/
define class2_alloc {
        case MarthruJun {
           condition   month >= mar .and. month <= jun
            value max(0.0, min(Fr_WS_for_cor - Class1_alloc - Fr_for_spill_cor, Class2_max - Class2_delivered)) }
        case firstmonth {
            condition wateryear == 1922 .and. month == oct
            value 0.0 }
        case otherwise {
            condition   always
            value C2_alloc_tmp(-1) - tot_C2_del(-1) } }
! Allows past values of Class 2 allocation can be accessed via C2_alloc_tmp
goal set_C2_alloc_tmp {C2_alloc_tmp = class2_alloc }

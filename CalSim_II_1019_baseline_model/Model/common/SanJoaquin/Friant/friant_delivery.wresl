! Friant_delivery.wresl
! Created for Upper San Joaquin Basin Storage Investigation project
! Revised by C. Hsu, 02/25/03, USBR, for review and documentation
!###################################################################################

/*
Friant-Kern and Madera Canal additional deliveries
*/
! Friant-Kern Canal capacity at head
define FK_cap_head {value 5000.0 }
! Madera Canal capacity at head
define Madera_cap_head {value 1250.0 }
! Maximum allowed additional Friant-Kern Canal delivery
define FK_fl_cap {value 1200.0 }
! Maximum allowed additional Madera Canal delivery
define Madera_fl_cap {value 200.0 }

! Read Madera Canal loss from lookup table
define Madera_loss {
    select Madera_inc
    from Friant_canal_losses
    where contract_month = contract_month }
! added to account for CALSIM Friant loss function
goal set_D18b_loss { D18b_loss < L590  }

! Limit Madera Canal losses to max values previously defined in lookup table
goal set_L590a { L590 < Madera_loss*taf_cfs }

! Read Friant-Kern Canal loss from lookup table
define FK_loss {
    select FK_inc
    from Friant_canal_losses
    where contract_month = contract_month }

! Friant Kern Losses
goal set_D18A_loss {D18A_loss < FK_loss*taf_cfs}


! the following section is commented out here and moved to 
! friant_wsf.wresl so it can be used to modify the forecast
! in the March-June time period
! @jmg 2016.11.28
!*************************************************************
!/*
! sum of Exchange water delivered prior to current month
! - this segment is retrospective - actual deliveries for 
!   this time step are calculated in friant_deliveries.wresl
! @jmg 2016.11.10
! */
!define prior_FEX_del {
!	case march {
!		condition month == mar
!		value 0.0 }
!	case initialyear {
!		condition month < mar .and. wateryear ==1922
!		value 0.0 }
!	case otherwise {
!		condition always
!		sum(i=prevmar, -1, 1) FEX_delivery(i) }
!}


/*
 * in order to account for a changing CVP_PEX shortfall 
 * (i.e. one that decreases as WSI becomes more certain 
 * from Mar-Jun), need to know how much of the shortfall,
 * as of this time step, remains to be delivered
 * @jmg 2016.11.16
 */
define curr_FEX_rem {
	case march { ! first month of contract year
	    condition month == mar
	    value PEX_short_annvol_adj}
	case initialyear {
		condition month < mar .and. wateryear ==1922
		value 0.0 }
	case otherwise {
		condition always
		value PEX_short_annvol_adj - prior_FEX_del} 
}

/*
 * the current amoutn remaining just calc'd (above), is likely 
 * less than would be there if the current (smaller) shortfall
 * had been in place prior to this timestep; this next section
 * calculates what this remaining amount would have been given
 * the present timestep calculated shortfall from cvp_sys_cut
 * @jmg 2016.11.16
 */
! first need to know what the cumulative delivery fraction should be
! if we're following the prescribed distribution; this is a column
! in the Exchange_Monthly_Demand.table
define fex_del_cumfrac {
    select CumMonFrac
    from Exchange_Monthly_Demand
    where contract_month = contract_month }



define fex_del_prevcumfrac {
	case march {
		condition contract_month == 1
		value 0.0
	}
	case firstyear {
		condition month < mar .and. wateryear ==1922
		value 0.0
	}
	case otherwise {
		condition always
		select CumMonFrac
    	from Exchange_Monthly_Demand
    	where contract_month = contract_month-1 }		
	}


! calculate the PEX delivery shortfall remaining to be delivered
! that would have existed at the end of the last time step assuming the current
! shortfall and allocation pattern had been followed for all steps prior to now
define fex_alloc_amtrem { value PEX_short_annvol_adj-fex_del_prevcumfrac*PEX_short_annvol_adj }

! now we calculate the difference between the remaingin delivery amount based on
! actual deliveries so far and the remaining deliveries that would exist if we had
! been using this time step's allocation amount
define fex_amtrem_diff { value curr_FEX_rem - fex_alloc_amtrem}

! Read Friant Exchange delivery pattern from lookup table
! values in this table are calculated as the combined D607B and D608B demands
! for each month divided by the total annual demand summed for D607B and D608B
define fex_del_frac {
    select CombMonthFrac
    from Exchange_Monthly_Demand
    where contract_month = contract_month }
!define fex_del_tmp {upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}



!define fex_del_mon {
!	case MarThruOct {
!		condition month >= mar .and. month <= sep
!        value max(0.0, fex_alloc2 * fex_del_frac) }
!    case restofyr {
!    	condition always
!    	value 0.0 }
!}

! calculate the delivery for this timestep assuming no adjustments to the monthly fraction
define fex_del_mon_tmp { value max(0.0, fex_alloc2 * fex_del_frac)}  !@jmg 2016.11.16 - updated to reflect that fex_del_frac
                                                                 ! has a value every month of the year
! now we calculate an adjusted delivery amount based on the difference between what
! should be remaining to be delivered and the actual at the beginning of this time step
! plus the delivery for this time step assuming the present allocation/shortfall amount
! if this term is negative, the adjusted delivery for this time step is zero (0)
! @jmg 2016.11.16
define adj_fex_del_tmp { value fex_del_mon_tmp+ fex_amtrem_diff}

define fex_del_mon {
	case neg_adjtmp {
		condition adj_fex_del_tmp < 0.0
		value 0.0
		}
	case otherwise {
		condition always
		value adj_fex_del_tmp
	}
}                                                          

define fex_delivery {upper unbounded lower unbounded kind 'FRIANT-DEL' units 'TAF' }                                                                
goal set_fex_del_tmp {fex_delivery= fex_del_mon }

!! Define temporary variable for fex_alloc
!define fex_alloc_tmp {upper unbounded lower unbounded kind 'TEMPORARY' units 'TAF' }
!!/*
!!Determination of Friant Exchange allocations. Allocation made March through June is determined
!!by EX shortfall from CVP (PEX_short_annvol) and Friant water supply forecast; after June the allocation
!!* is reduced by the amount already delivered.
!!*@jmg 2016.11.10
!!*/
!define fex_alloc {
!        case MarthruJun {
!           condition   month >= mar .and. month <= jun
!            value max(0.0, fex_alloc2) }   !@jmg 2016.11.10 - fex_alloc1 defined in friant_wsf.wresl
!        case firstmonth {
!            condition wateryear == 1922 .and. month == oct
!            value 0.0 }
!        case JulthruSep {
!            condition   month >= jul .and. month <= sep
!            value fex_alloc2 - prior_fex_del }
!        case October {
!        	condition month == oct
!        	value fex_alloc2 - prior_fex_del
!        }
!        case otherwise {
!        	condition always
!        	value 0.0
!        	 }
!   	 }
!! Allows past values of Class 1 allocation can be accessed via C1_alloc_tmp
!goal set_fex_alloc_tmp {fex_alloc_tmp = fex_alloc }



!define fex_del_frac { value 0.125}   ! distribute the allocation of Friant water to 
!                                     ! Exchange contractors evenly over 8 month period
!                                     ! from March to October - a simplification that 
!                                     ! can be refined in the future
!                                     ! @jmg 2016.11.10
                                     
                                     





/*
This file implements Friant delivery logic, breakdown of deliveries by canal and class
Incorporates projected canal losses into delivery requirement
*/
! Look up percent of Class 1 allocation to Friant-Kern Canal
define Pct_C1_FK {
    select FK
    from Friant_Allocation
    where item = 1 }
! Look up percent of Class 1 allocation to Madera Canal
define Pct_C1_Madera {
    select Madera
    from Friant_Allocation
    where item = 1 }
! Look up percent of Class 2 allocation to Friant-Kern Canal
define Pct_C2_FK {
    select FK
    from Friant_Allocation
    where item = 2 }
! Look up percent of Class 2 allocation to Madera Canal
define Pct_C2_Madera {
    select Madera
    from Friant_Allocation
    where item = 2 }

/*
Define annual class 1 allocated
Note: "Class1_alloc" is the class1 allocation from current month through the end of year
and annual class1 allocation is Class 1 water delivered through the previous month plus
the Class 1 allocation from the current month through the end of the year
this variable is needed to access previous values of class 1 allocation
*/
define ann_C1_alloc { upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}
! Annual Class 1 allocation equals to the amount of Class 1 allocated and Class 1 delivered combined
goal set_ann_C1_alloc { ann_C1_alloc = Class1_delivered + Class1_alloc}

! Annual Friant-Kern Canal Class 1 delivery computation - updated monthly through June
define Ann_FK_C1 {
    case initialmonth {
        condition month == oct .and. wateryear == 1922
        value 0 }
    case MarthruJun {
         condition   month >= mar .and. month <= jun
         value (Class1_alloc + Class1_delivered) *  Pct_C1_FK / 100. }
    case otherwise {
        condition always
        value ann_C1_alloc(-1) *  Pct_C1_FK / 100. }}

! Annual Madera Canal Class 1 delivery computation - updated monthly
define Ann_Madera_C1 {
    case initialmonth {
        condition month == oct .and. wateryear == 1922
        value 0 }
    case MarthruJun {
         condition   month >= mar .and. month <= jun
         value (Class1_alloc + Class1_delivered) *  Pct_C1_Madera / 100. }
    case otherwise {
        condition always
        value ann_C1_alloc(-1) *  Pct_C1_Madera / 100. }}

! Annual Friant-Kern Canal Class 2 delivery computation - updated monthly
define Ann_FK_C2 {
    case initialmonth {
        condition month == oct .and. wateryear == 1922
        value 0.0 }
    case otherwise {
        condition always
        value (class2_alloc + Class2_delivered) *  Pct_C2_FK / 100. }}

! Annual Madera Canal Class 2 delivery computation - updated monthly
define Ann_Madera_C2 {
    case initialmonth {
        condition month == oct .and. wateryear == 1922
        value 0.0 }
    case otherwise {
        condition always
        value (class2_alloc + Class2_delivered) *  Pct_C2_Madera / 100. }}

! Annual Friant-Kern Canal delivery amount (Class 1 and 2 combined)
define Ann_FK_tot  { value Ann_FK_C1 + Ann_FK_C2 }
! Annual Madera Canal delivery amount (Class 1 and 2 combined)
define Ann_Madera_tot { value Ann_Madera_C1 + Ann_Madera_C2 }
! Annual total Friant (Friant-Kern + Madera) delivery amount
define Ann_Fr_tot { value Ann_FK_tot + Ann_Madera_tot }

! Look up total delivery pattern for Friant-Kern Canal
define FK_tot_pct {
    select percent
    from FK_delivery_total
    given delivery = Ann_Fr_tot
    use minimum
    where contract_month = contract_month }

! Look up Class 1 delivery pattern for Friant-Kern Canal
define FK_C1_pct {
    select percent
    from FK_delivery_class1
    given delivery = Ann_Fr_tot
    use minimum
    where contract_month = contract_month }

! Look up total delivery pattern for Madera Canal
define Madera_tot_pct {
    select percent
    from Madera_delivery_total
    given delivery = Ann_Fr_tot
    use minimum
    where contract_month = contract_month }

! Look up Class 1 delivery pattern for Madera Canal
define Madera_C1_pct {
    select percent
    from Madera_delivery_class1
    given delivery = Ann_Fr_tot
    use minimum
    where contract_month = contract_month }

define sum_Mad_tot_pct {std kind 'percentage-delivered' units 'none'}
define sum_Mad_C1_pct {std kind 'percentage-delivered' units 'none'}

define sum_Mad_tot_pct_ {
    case March {
        condition   month == mar
        value       0.
    }
    case otherwise {
        condition   always
        value       sum_Mad_tot_pct(-1) + Madera_tot_pct
    }
}
define sum_Mad_C1_pct_ {
    case March {
        condition   month == mar
        value       0.
    }
    case otherwise {
        condition   always
        value       sum_Mad_C1_pct(-1) + Madera_C1_pct
    }
}

goal set_sum_Mad_tot_pct {sum_Mad_tot_pct = sum_Mad_tot_pct_}
goal set_sum_Mad_C1_pct {sum_Mad_C1_pct = sum_Mad_C1_pct_}

define rem_Mad_tot_pct_ {
    case March {
        condition   month == mar
        value       100.
    }
    case otherwise {
        condition   always
        value max(0.,100. - sum_Mad_tot_pct(-1))
    }
}

define rem_Mad_C1_pct_ {
    case March {
        condition   month == mar
        value       100.
    }
    case otherwise {
        condition   always
        value max(0.,100. - sum_Mad_C1_pct(-1))
    }
}

define rem_Mad_tot_pct {alias rem_Mad_tot_pct_ kind 'percentage-remaining' units 'none'}
define rem_Mad_C1_pct {alias rem_Mad_tot_pct_ kind 'percentage-remaining' units 'none'}

define Mad_C1_frc {
    case denom_zero {
        condition   rem_Mad_C1_pct_ < 0.1
        value       0.
    }
    case OctToFeb {
        condition   month <= 5
        value       1.
    }
    case otherwise {
        condition   always
        value min(1.,Madera_C1_pct/rem_Mad_C1_pct_)
    }
}
define Mad_tot_frc {
    case denom_zero {
        condition   rem_Mad_tot_pct_ < 0.1
        value       0.
    }
    case OctToFeb {
        condition   month <= 5
        value       1.
    }
    case otherwise {
        condition   always
        value min(1.,Madera_tot_pct/rem_Mad_tot_pct_)
    }
}

!define Ann_Fr_tot_out {alias Ann_Fr_tot kind 'temp' units 'taf'}
!define FK_tot_pct_out {alias FK_tot_pct kind 'temp' units 'taf'}
!define FK_C1_pct_out {alias FK_C1_pct kind 'temp' units 'taf'}
define MC_tot_pct_out {alias Madera_tot_pct kind 'temp' units 'taf'}
define MC_C1_pct_out {alias Madera_C1_pct kind 'temp' units 'taf'}
define Mad_C1_frc_out {alias Mad_C1_frc kind 'temp' units 'taf'}
define Mad_tot_frc_out {alias Mad_tot_frc kind 'temp' units 'taf'}


! Calculation of Friant-Kern Canal Class 1 delivery based on lookup pattern
define FK_C1_del { value (FK_C1_pct / 100.) * Ann_FK_C1 }

! Calculation of Madera Canal Class 1 delivery based on lookup pattern
define Madera_C1_del { value (Madera_C1_pct / 100.) * Ann_Madera_C1 }

! Calculation of Friant-Kern Canal total delivery based on lookup pattern
define FK_tot_del { value (FK_tot_pct / 100.) * Ann_FK_tot }

! Calculation of monthly Madera Canal total delivery based on lookup pattern
define Madera_tot_del { value (Madera_tot_pct / 100.) * Ann_Madera_tot }

! Calculation of Friant-Kern Canal Class 2 delivery (total - Class 1)
define FK_C2_del { value max(0.,FK_tot_del - FK_C1_del) }
define FK_C2_del_ {alias fk_c2_del kind 'temp' units 'taf'}
define FK_tot_del_ {alias fk_tot_del kind 'temp' units 'taf'}
define FK_C1_del_ {alias fk_c1_del kind 'temp' units 'taf'}


! Calculation of Madera Canal Class 2 delivery (total - Class 1)
define Madera_C2_del { value max(0.,Madera_tot_del - Madera_C1_del) }

! Total monthly (Friant-Kern + Madera Canal) delivery
define tot_del { value Madera_tot_del + FK_tot_del }

! Total monthly (Friant-Kern + Madera Canal) Class 1 delivery
goal set_tot_C1_del {tot_C1_del = Madera_C1_del + FK_C1_del }

! Total monthly (Friant-Kern + Madera Canal) Class 2 delivery
goal set_tot_C2_del {tot_C2_del = Madera_C2_del + FK_C2_del }

! Define temporary variable for total_del
define temp005 { upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}
! Set temporally variable equal to tot_del
goal set_temp005 { temp005 = tot_del }
! Define temporary variable for total_class1_del
define temp006 { upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}
! Set temporally variable equal to tot_C1_del
goal set_temp006 { temp006 = tot_C1_del }
! Define temporary variable for total_class2_del
define temp007 { upper unbounded lower unbounded kind 'TEMPORARY' units 'taf'}
! Set temporally variable equal to tot_C2_del
goal set_temp007 { temp007 = tot_C2_del }

! Temporary variable to compute total delivery through previous month
define temp008 {
    case initialyear {
        condition month <= mar .and. wateryear == 1922
        value 0. }
    case otherwise {
        condition always
        sum(i=prevmar,-1,1) temp005(i)} }

! Temporary variable to compute Class 1 delivery through previous month
define temp009 {
    case initialyear {
        condition month <= mar .and. wateryear == 1922
        value 0. }
    case otherwise {
        condition always
        sum(i=prevmar,-1,1) temp006(i)} }

! Temporary variable to compute Class 2 delivery through previous month
define temp010 {
    case initialyear {
        condition month <= mar .and. wateryear == 1922
        value 0. }
    case otherwise {
        condition always
        sum(i=prevmar,-1,1) temp007(i)} }

! Total delivery from Friant through current month
define tot_del_mon { std kind 'FRIANT-DEL' units 'taf' }
! Temporary variable for monthly total delivery
goal set_temp008 { tot_del_mon = temp008 + tot_del }

! Total Class 1 delivery from Friant through current month
define tot_del_C1_mon { std kind 'FRIANT-DEL' units 'taf' }
! Temporary variable for monthly Class 1 delivery
goal set_temp009 { tot_del_c1_mon = temp009 + tot_C1_del }

! Total Class 2 delivery from Friant through current month
define tot_del_C2_mon { std kind 'FRIANT-DEL' units 'taf' }
! Temporary variable for monthly Class 2 delivery
goal set_temp010 { tot_del_c2_mon = temp010 + tot_C2_del }

! Define estimate of Friant-Kern Canal release (initial demand estimate + canal loss)
define D18A_ini { value FK_C1_del + FK_C2_del + FK_loss }

! Define estimate of Madera Canal release (initial demand estimate + canal loss)
define D18B_ini { value Madera_C1_del + Madera_C2_del + Madera_loss }

define madera_c1_del_ {alias Madera_C1_del kind 'temp' units 'taf'}
define madera_c2_del_ {alias Madera_C2_del kind 'temp' units 'taf'}
define madera_loss_ {alias Madera_loss kind 'temp' units 'taf'}

define fk_loss_ {alias fk_loss kind 'temp' units 'taf'}


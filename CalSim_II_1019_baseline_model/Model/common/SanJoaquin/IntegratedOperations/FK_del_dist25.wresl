!Distribute Diversions and Losses along the Friant Kern

!Friant to Kings

define D910_C1 {std kind 'flow-delivery' units 'cfs'}
define D910_C2 {std kind 'flow-delivery' units 'cfs'}
define D910_215 {std kind 'flow-delivery' units 'cfs'}
define D910_SD {std kind 'flow-delivery' units 'cfs'}
define D910_16B {std kind 'flow-delivery' units 'cfs'}

goal split_D910 {D910 = D910_C1 + D910_C2 + D910_215 + D910_SD + D910_16B }

define dist_910_c1 {select C1 from FK_delivery_dist where NODE = 910}
define dist_910_c2 {select C2 from FK_delivery_dist where NODE = 910}
define dist_910_215 {select C215 from FK_delivery_dist where NODE = 910}
define dist_910_LOSS {select LOSS from FK_delivery_dist where NODE = 910}

goal lim_D910_c1 {D910_C1 < FK_C1_DEL * taf_cfs * dist_910_c1/100.}
goal lim_D910_c2 {D910_C2 < FK_final_C2 * taf_cfs * dist_910_c2/100.}
goal lim_D910_215 {D910_215 < FK_add * taf_cfs * dist_910_215/100.}
goal lim_L910 {L910 < FK_Loss * taf_cfs * dist_910_LOSS/100.}

!Kings to Fifth Ave

define D920_C1 {std kind 'flow-delivery' units 'cfs'}
define D920_C2 {std kind 'flow-delivery' units 'cfs'}
define D920_215 {std kind 'flow-delivery' units 'cfs'}
define D920_SD {std kind 'flow-delivery' units 'cfs'}
define D920_16B {std kind 'flow-delivery' units 'cfs'}

goal split_D920 {D920 = D920_C1 + D920_C2 + D920_215 + D920_SD + D920_16B}

define dist_920_c1 {select C1 from FK_delivery_dist where NODE = 920}
define dist_920_c2 {select C2 from FK_delivery_dist where NODE = 920}
define dist_920_215 {select C215 from FK_delivery_dist where NODE = 920}
define dist_920_LOSS {select LOSS from FK_delivery_dist where NODE = 920}

goal lim_D920_c1 {D920_C1 < FK_C1_DEL * taf_cfs * dist_920_c1/100.}
goal lim_D920_c2 {D920_C2 < FK_final_C2 * taf_cfs * dist_920_c2/100.}
goal lim_D920_215 {D920_215 < FK_add * taf_cfs * dist_920_215/100.}
goal lim_L920 {L920 < FK_Loss * taf_cfs * dist_920_LOSS/100.}

!Fifth to Deer Cr.

define D932_C1 {std kind 'flow-delivery' units 'cfs'}
define D932_C2 {std kind 'flow-delivery' units 'cfs'}
define D932_215 {std kind 'flow-delivery' units 'cfs'}
define D932_SD {std kind 'flow-delivery' units 'cfs'}
define D932_16B {std kind 'flow-delivery' units 'cfs'}

goal split_D932 {D932 = D932_C1 + D932_C2 + D932_215 + D932_SD + D932_16B}

define dist_932_c1 {select C1 from FK_delivery_dist where NODE = 932}
define dist_932_c2 {select C2 from FK_delivery_dist where NODE = 932}
define dist_932_215 {select C215 from FK_delivery_dist where NODE = 932}
define dist_932_LOSS {select LOSS from FK_delivery_dist where NODE = 932}

goal lim_D932_c1 {D932_C1 < FK_C1_DEL * taf_cfs * dist_932_c1/100.}
goal lim_D932_c2 {D932_C2 < FK_final_C2 * taf_cfs * dist_932_c2/100.}
goal lim_D932_215 {D932_215 < FK_add * taf_cfs * dist_932_215/100.}
goal lim_L930 {L930 < FK_Loss * taf_cfs * dist_932_LOSS/100.}

!Deer Cr. to Poso

define D933_C1 {std kind 'flow-delivery' units 'cfs'}
define D933_C2 {std kind 'flow-delivery' units 'cfs'}
define D933_215 {std kind 'flow-delivery' units 'cfs'}
define D933_SD {std kind 'flow-delivery' units 'cfs'}
define D933_16B {std kind 'flow-delivery' units 'cfs'}

goal split_D933 {D933 = D933_C1 + D933_C2 + D933_215 + D933_SD + D933_16B}

define dist_933_c1 {select C1 from FK_delivery_dist where NODE = 933}
define dist_933_c2 {select C2 from FK_delivery_dist where NODE = 933}
define dist_933_215 {select C215 from FK_delivery_dist where NODE = 933}
define dist_933_LOSS {select LOSS from FK_delivery_dist where NODE = 933}

goal lim_D933_c1 {D933_C1 < FK_C1_DEL * taf_cfs * dist_933_c1/100.}
goal lim_D933_c2 {D933_C2 < FK_final_C2 * taf_cfs * dist_933_c2/100.}
goal lim_D933_215 {D933_215 < FK_add * taf_cfs * dist_933_215/100.}
goal lim_L933 {L933 < FK_Loss * taf_cfs * dist_933_LOSS/100.}

!Poso to Shafter-Wasco

define D937_C1 {std kind 'flow-delivery' units 'cfs'}
define D937_C2 {std kind 'flow-delivery' units 'cfs'}
define D937_215 {std kind 'flow-delivery' units 'cfs'}
define D937_SD {std kind 'flow-delivery' units 'cfs'}
define D937_16B {std kind 'flow-delivery' units 'cfs'}

goal split_D937 {D937 = D937_C1 + D937_C2 + D937_215 + D937_SD + D937_16B}

define dist_937_c1 {select C1 from FK_delivery_dist where NODE = 937}
define dist_937_c2 {select C2 from FK_delivery_dist where NODE = 937}
define dist_937_215 {select C215 from FK_delivery_dist where NODE = 937}
define dist_937_LOSS {select LOSS from FK_delivery_dist where NODE = 937}

goal lim_D937_c1 {D937_C1 < FK_C1_DEL * taf_cfs * dist_937_c1/100.}
goal lim_D937_c2 {D937_C2 < FK_final_C2 * taf_cfs * dist_937_c2/100.}
goal lim_D937_215 {D937_215 < FK_add * taf_cfs * dist_937_215/100.}
goal lim_L935 {L935 < FK_Loss * taf_cfs * dist_937_LOSS/100.}

!Shafter-Wasco to Arvin-Edison

define D950_C1 {std kind 'flow-delivery' units 'cfs'}
define D950_C2 {std kind 'flow-delivery' units 'cfs'}
define D950_215 {std kind 'flow-delivery' units 'cfs'}
define D950_SD {std kind 'flow-delivery' units 'cfs'}
define D950_16B {std kind 'flow-delivery' units 'cfs'}

goal split_D950 {D950 = D950_C1 + D950_C2 + D950_215 + D950_SD + D950_16B}

define dist_950_c1 {select C1 from FK_delivery_dist where NODE = 950}
define dist_950_c2 {select C2 from FK_delivery_dist where NODE = 950}
define dist_950_215 {select C215 from FK_delivery_dist where NODE = 950}
define dist_950_LOSS {select LOSS from FK_delivery_dist where NODE = 950}

goal lim_D950_c1 {D950_C1 < FK_C1_DEL * taf_cfs * dist_950_c1/100.}
goal lim_D950_c2 {D950_C2 < FK_final_C2 * taf_cfs * dist_950_c2/100.}
goal lim_D950_215 {D950_215 < FK_add * taf_cfs * dist_950_215/100.}
goal lim_L950 {L950 < FK_Loss * taf_cfs * dist_950_LOSS/100.}

!Aggregate C1, C2, and 215 deliveries for CVPM_Linkage
define DFKC_C1 {alias D910_C1 + D920_C1 + D932_C1 + D933_C1 + D937_C1 + D950_C1 kind 'flow-delivery' units 'cfs'}
define DFKC_C2 {alias D910_C2 + D920_C2 + D932_C2 + D933_C2 + D937_C2 + D950_C2 kind 'flow-delivery' units 'cfs'}
define DFKC_215 {alias D910_215 + D920_215 + D932_215 + D933_215 + D937_215 + D950_215 kind 'flow-delivery' units 'cfs'}
define LFKC {alias L910 + L920 + L930 + L933 + L935 + L950 kind 'flow-delivery' units 'cfs'}
define DFKC_16B {alias D910_16B + D920_16B + D932_16B + D933_16B + D937_16B + D950_16B kind 'flow-delivery' units 'cfs'}
define DFKC_16B215 {alias DFKC_16B + DFKC_215 kind 'flow-delivery' units 'cfs'}


!Limit supplemental delivery to distibuted supplemental C2 demand.
!First subdivide supplemental deliveries into groundwater and return
!from mwd incremental storage.  We'll define the groundwater demand here.
!The demand for FWUA water in MWD storage will be dependent on the water available.

define D910_SD_GWP {std kind 'flow-delivery' units 'cfs'}
define D920_SD_GWP {std kind 'flow-delivery' units 'cfs'}
define D932_SD_GWP {std kind 'flow-delivery' units 'cfs'}
define D937_SD_GWP {std kind 'flow-delivery' units 'cfs'}
define D950_SD_GWP {std kind 'flow-delivery' units 'cfs'}

define D910_SD_FR {std kind 'flow-delivery' units 'cfs'}
define D920_SD_FR {std kind 'flow-delivery' units 'cfs'}
define D932_SD_FR {std kind 'flow-delivery' units 'cfs'}
define D937_SD_FR {std kind 'flow-delivery' units 'cfs'}
define D950_SD_FR {std kind 'flow-delivery' units 'cfs'}

goal splitD910_SD {D910_SD = D910_SD_GWP + D910_SD_FR}
goal splitD920_SD {D920_SD = D920_SD_GWP + D920_SD_FR}
goal splitD932_SD {D932_SD = D932_SD_GWP + D932_SD_FR}
goal splitD937_SD {D937_SD = D937_SD_GWP + D937_SD_FR}
goal splitD950_SD {D950_SD = D950_SD_GWP + D950_SD_FR}
/*
define demand_SD_gwp {
	!case October {condition month == oct value max(0.,11. - FK_final_C2)}
	!case November {condition month == nov value max(0.,3. - FK_final_C2)}
	!case December {condition month == dec value max(0.,4. - FK_final_C2)}
	!case January {condition month == jan value max(0.,4. - FK_final_C2)}
	!case February {condition month == feb value max(0.,18. - FK_final_C2)}
	!case March {condition month == mar value max(0.,15. - FK_final_C2)}
	case NoDemand {condition range(month,oct,mar) .or. Fr_snow_rel > 1 .or. S18(-1) > 450 value 0.}
	case April {condition month == apr value max(0.,33. - FK_final_C2)}
	case May {condition month == may value max(0.,43. - FK_final_C2)}
	case June {condition month == jun value max(0.,48. - FK_final_C2)}
	case July {condition month == jul value max(0.,41. - FK_final_C2)}
	case August {condition month == aug value max(0.,37. - FK_final_C2)}
	case September {condition always value max(0.,21. - FK_final_C2)}
}

define demand_SD_gwp_ {alias demand_SD_gwp kind 'demand' units 'taf'}

goal lim_D910_SD_GWP {D910_SD_GWP < demand_SD_gwp * taf_cfs * dist_910_c2/100.}
goal lim_D920_SD_GWP {D920_SD_GWP < demand_SD_gwp * taf_cfs * dist_920_c2/100.}
goal lim_D932_SD_GWP {D932_SD_GWP < demand_SD_gwp * taf_cfs * dist_932_c2/100.}
goal lim_D937_SD_GWP {D937_SD_GWP < demand_SD_gwp * taf_cfs * dist_937_c2/100.}
goal lim_D950_SD_GWP {D950_SD_GWP < demand_SD_gwp * taf_cfs * dist_950_c2/100.}
*/
goal lim_D910_SD {D910_SD < 0}
goal lim_D920_SD {D920_SD < 0}
goal lim_D932_SD {D932_SD < 0}
goal lim_D933_SD {D933_SD < 0}
goal lim_D937_SD {D937_SD < 0}
goal lim_D950_SD {D950_SD < 0}

define D910_16B_DR {std kind 'flow-delivery' units 'cfs'}
define D910_16B_IL {std kind 'flow-delivery' units 'cfs'}
define D910_16B_PC {std kind 'flow-delivery' units 'cfs'}
goal split_D910_16B {D910_16B = D910_16B_DR + D910_16B_IL + D910_16B_PC}

define D920_16B_DR {std kind 'flow-delivery' units 'cfs'}
define D920_16B_IL {std kind 'flow-delivery' units 'cfs'}
define D920_16B_PC {std kind 'flow-delivery' units 'cfs'}
goal split_D920_16B {D920_16B = D920_16B_DR + D920_16B_IL + D920_16B_PC}

define D932_16B_DR {std kind 'flow-delivery' units 'cfs'}
define D932_16B_IL {std kind 'flow-delivery' units 'cfs'}
define D932_16B_PC {std kind 'flow-delivery' units 'cfs'}
goal split_D932_16B {D932_16B = D932_16B_DR + D932_16B_IL + D932_16B_PC}

define D933_16B_DR {std kind 'flow-delivery' units 'cfs'}
define D933_16B_IL {std kind 'flow-delivery' units 'cfs'}
define D933_16B_PC {std kind 'flow-delivery' units 'cfs'}
goal split_D933_16B {D933_16B = D933_16B_DR + D933_16B_IL + D933_16B_PC}

define D937_16B_DR {std kind 'flow-delivery' units 'cfs'}
define D937_16B_IL {std kind 'flow-delivery' units 'cfs'}
define D937_16B_PC {std kind 'flow-delivery' units 'cfs'}
goal split_D937_16B {D937_16B = D937_16B_DR + D937_16B_IL + D937_16B_PC}

define D950_16B_DR {std kind 'flow-delivery' units 'cfs'}
define D950_16B_IL {std kind 'flow-delivery' units 'cfs'}
define D950_16B_PC {std kind 'flow-delivery' units 'cfs'}
goal split_D950_16B {D950_16B = D950_16B_DR + D950_16B_IL + D950_16B_PC}


goal lim_D910_16B_DR {D910_16B_DR < 130.}
goal lim_D920_16B_DR {D920_16B_DR < 110.}
goal lim_D932_16B_DR {D932_16B_DR < 95.}
goal lim_D933_16B_DR {D933_16B_DR < 125.}
goal lim_D937_16B_DR {D937_16B_DR < 325.}
goal lim_D950_16B_DR {D950_16B_DR < 1000.}

define ag_pattern_pct {
    select percent
    from FK_delivery_total
    given delivery = 1500.
    use minimum
    where contract_month = contract_month }


goal lim_D910_16B_IL {D910_16B_IL < 45.*ag_pattern_pct/19.}
goal lim_D920_16B_IL {D920_16B_IL < 10.*ag_pattern_pct/19.}
goal lim_D932_16B_IL {D932_16B_IL < 590.*ag_pattern_pct/19.}
goal lim_D933_16B_IL {D933_16B_IL < 50.*ag_pattern_pct/19.}
goal lim_D937_16B_IL {D937_16B_IL < 465.*ag_pattern_pct/19.}
goal lim_D950_16B_IL {D950_16B_IL < 1000.*ag_pattern_pct/19.}


goal route_fkc_16B {D18A_16B = DFKC_16B}

define tot_D910_16B_ {std kind 'annual-delivery' units 'taf'}
define tot_D920_16B_ {std kind 'annual-delivery' units 'taf'}
define tot_D932_16B_ {std kind 'annual-delivery' units 'taf'}
define tot_D933_16B_ {std kind 'annual-delivery' units 'taf'}
define tot_D937_16B_ {std kind 'annual-delivery' units 'taf'}
define tot_D950_16B_ {std kind 'annual-delivery' units 'taf'}

define tot_D910_16B {
	case October {
		condition	month == oct
		value		0.0
	}
	case otherwise {
		condition	always
		value		D910_16B(-1)*cfs_taf(-1) - D910_16B_PC(-1)*cfs_taf(-1) + tot_D910_16B_(-1)
	}
}

define tot_D920_16B {
	case October {
		condition	month == oct
		value		0.0
	}
	case otherwise {
		condition	always
		value		D920_16B(-1)*cfs_taf(-1) - D920_16B_PC(-1)*cfs_taf(-1) + tot_D920_16B_(-1)
	}
}

define tot_D932_16B {
	case October {
		condition	month == oct
		value		0.0
	}
	case otherwise {
		condition	always
		value		D932_16B(-1)*cfs_taf(-1) - D932_16B_PC(-1)*cfs_taf(-1) + tot_D932_16B_(-1)
	}
}

define tot_D933_16B {
	case October {
		condition	month == oct
		value		0.0
	}
	case otherwise {
		condition	always
		value		D933_16B(-1)*cfs_taf(-1) - D933_16B_PC(-1)*cfs_taf(-1) + tot_D933_16B_(-1)
	}
}

define tot_D937_16B {
	case October {
		condition	month == oct
		value		0.0
	}
	case otherwise {
		condition	always
		value		D937_16B(-1)*cfs_taf(-1) - D937_16B_PC(-1)*cfs_taf(-1) + tot_D937_16B_(-1)
	}
}

define tot_D950_16B {
	case October {
		condition	month == oct
		value		0.0
	}
	case otherwise {
		condition	always
		value		D950_16B(-1)*cfs_taf(-1) - D950_16B_PC(-1)*cfs_taf(-1) + tot_D950_16B_(-1)
	}
}

goal ann_D910_16B_lim {D910_16B_DR + D910_16B_IL < max(0., (14. - tot_D910_16B)*taf_cfs)}
goal ann_D920_16B_lim {D920_16B_DR + D920_16B_IL < max(0., (6. - tot_D920_16B)*taf_cfs)}
goal ann_D932_16B_lim {D932_16B_DR + D932_16B_IL < max(0., (10. - tot_D932_16B)*taf_cfs)}
goal ann_D933_16B_lim {D933_16B_DR + D933_16B_IL < max(0., (36. - tot_D933_16B)*taf_cfs)}
goal ann_D937_16B_lim {D937_16B_DR + D937_16B_IL < max(0., (105. - tot_D937_16B)*taf_cfs)}
goal ann_D950_16B_lim {D950_16B_DR + D950_16B_IL < max(0., (449. - tot_D950_16B)*taf_cfs)}

goal save_tot_D910_16B {tot_D910_16B_ = tot_D910_16B}
goal save_tot_D920_16B {tot_D920_16B_ = tot_D920_16B}
goal save_tot_D932_16B {tot_D932_16B_ = tot_D932_16B}
goal save_tot_D933_16B {tot_D933_16B_ = tot_D933_16B}
goal save_tot_D937_16B {tot_D937_16B_ = tot_D937_16B}
goal save_tot_D950_16B {tot_D950_16B_ = tot_D950_16B}

define pc_rech_on {
	case DecJan {
		condition	range(month,dec,jan) .and. tule_wet_indx < 41
		value		1.
	}
	case otherwise {
		condition	always
		value		0.
	}
}

goal lim_D910_16B_PC {D910_16B_PC < 637.*pc_rech_on}
goal lim_D920_16B_PC {D920_16B_PC < 471.*pc_rech_on}
goal lim_D932_16B_PC {D932_16B_PC < 209.*pc_rech_on}
goal lim_D933_16B_PC {D933_16B_PC < 373.*pc_rech_on}
goal lim_D937_16B_PC {D937_16B_PC < 63.*pc_rech_on}
goal lim_D950_16B_PC {D950_16B_PC < 275.*pc_rech_on}



